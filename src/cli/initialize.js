const YAML = require('yaml')
const fs = require('fs')
const path = require('path')
const inquirer = require('inquirer')

async function initialize(program) {
  let answers = {
    name: 'app',
    url: 'https://api.restqa.io',
    env: 'local',
    description: 'Configuration generated by restqa init -y'
  }

  if (true !== program.y) {
    const questions = [{
      type: 'input',
      name: 'name',
      message: 'Project name:',
    }, {
      type: 'input',
      name: 'description',
      message: 'Description:',
    }, {
      type: 'input',
      name: 'url',
      message: 'Host name of the target api (example: http://api.example.com)',
    }, {
      type: 'input',
      name: 'env',
      default: 'local',
      message: 'Environment name of this url (local) ?',
    }, {
      type: 'list',
      name: 'ci',
      message: 'Do you need a continuous integration configuration ?',
      choices: [{
        name: 'Github Action',
        value: 'github-action' 
      }, {
        name: 'Gitlab Ci',
        value: 'gitlab-ci' 
      }, {
        name: 'Bitbucket Pipelines',
        value: 'bitbucket-pipeline' 
      
      },
      new inquirer.Separator(),
      {
        name: 'I want to configure my continuous integration by myself',
        value: false
      }]
    }]
    answers = await inquirer.prompt(questions)
  }
  initialize.generate(answers)
}

initialize.generate = function (options) {
  const {
    ci,
    name,
    url,
    env,
    description
  } = options

  if (!name) {
    throw new Error('Please share a project name.')
  }

  if (!description) {
    throw new Error('Please share a project description.')
  }

  if (!url) {
    throw new Error('Please share a project url.')
  }

  if (!env) {
    throw new Error('Please share a project url environment.')
  }

  const restqaConfig = {
    version: '0.0.1',
    metadata: {
      code: name.replace(/[^A-Z0-9]+/ig, "-").toUpperCase(),
      name,
      description,
    },
    environments: [{
      name: env,
      default: true,
      plugins: [{
        name: 'restqapi',
        config: {
          url
        }
      }],
      output: [{
        type: 'http-html-report',
        enabled: true,
      }, {
        type: 'file',
        enabled: true,
        config: {
          path: 'restqa-result.json'
       }
      }]
    }]
  }

  createYaml('.restqa.yml', restqaConfig)

  if (ci) {
    switch (ci) {
      case 'github-action':
        var jsonContent = {
          name: 'RestQA - Integration tests',
          on: '[push]',
          jobs: {
            RestQa : {
              'runs-on': 'ubuntu-latest',
              steps: [{
                uses: 'actions/checkout@v1',
              }, {
                uses: 'restqa/restqa-action@0.0.1',
                with: {
                  path: 'tests/'
                }
              }]
            }
          }
        }
        createYaml('.github/workflows/integration-test.yml', jsonContent)
        break;
      case 'gitlab-ci':
        var jsonContent = {
          stages: [
            'e2e test'
          ],
          RestQa: {
            stage: 'e2e test',
            image: {
              name: 'restqa/restqa'
            },
            script: [
              'restqa run .'
            ]
          }
        }
        createYaml('.gitlab-ci.yml', jsonContent)
        break;
      case 'bitbucket-pipeline':
        var jsonContent = {
          pipelines: {
            default: [{
              step: {
                image: 'restqa/restqa',
                script: [
                  'restqa run .'
                ]
              }
            }]
          }
        }
        createYaml('bitbucket-pipelines.yml', jsonContent)
        break;
      default:
        throw new Error(`The continous integration "${ci}" is not supported by RestQa`)
    }
  }
}

function createYaml(filename, jsonContent) {
  let contentYAML = YAML.stringify(jsonContent, null, { directivesEndMarker: true })
  fs.writeFileSync(filename, contentYAML)
}

module.exports = initialize


/*
module.exports = async function (program) {
  let filename = path.resolve(process.cwd(), '.restqa.yml')
  let  content = {}
  if (true === program.y) {
    content = getDefaultTemplate()
  }

  let contentYAML = YAML.stringify(content, null, { directivesEndMarker: true })
  fs.writeFileSync(filename, contentYAML)
}

function getDefaultTemplate() {
  return {
    version: '0.0.1',
    metadata: {
      code: 'APP',
      name: 'sample api app',
      description: 'Configuration generated by restqa init -y'
    },
    environments: [{
      name: 'local',
      default: true,
      plugins: [{
        name: 'restqapi',
        config: {
          url: 'https://api.restqa.io'
        }
      }],
      outputs: [{
        type: 'http-html-report',
        enabled: true
      }]
    }]
  }
}
*/
